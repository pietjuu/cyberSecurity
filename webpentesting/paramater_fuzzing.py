#!/usr/bin/python
# -*- coding: utf-8 -*-
# import modules
import subprocess
import os
import httpx
import asyncio

# target domain
target_domain = input("Enter the target domain like example.com: ")


# Function to run gau to discover URLs with interesting parameters
def discover_urls(domain):
    try:
        gau_output = subprocess.check_output(["gau", domain], text=True)
        urls = gau_output.strip().split('\n')
        return urls
    except Exception as e:
        print(f"Error while running gau for {domain}: {str(e)}")
        return []


# Function to run ffuf to fuzz parameters for a given URL
# TODO path wordlist
def fuzz_parameters(url):
    try:
        subprocess.run(["ffuf", "-u", url, "-w", "wordlist.txt"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Fuzzing failed for {url}: {str(e)}")


# Function to determine responses for different parameter combinations using httpx
async def determine_responses(urls):
    async with httpx.AsyncClient() as client:
        results = []
        for url in urls:
            try:
                response = await client.get(url)
                result = f"URL: {url}, Status Code: {response.status_code}\n"
                results.append(result)
            except Exception as e:
                result = f"Error while requesting {url}: {str(e)}\n"
                results.append(result)
        return results


# Main script
if __name__ == "__main__":
    # Get the list of discovered URLs
    discovered_urls = discover_urls(target_domain)

    # Perform parameter fuzzing and collect results
    fuzzing_results = []
    for url in discovered_urls:
        fuzz_parameters(url)

    # Determine HTTP responses asynchronously
    loop = asyncio.get_event_loop()
    response_results = loop.run_until_complete(determine_responses(discovered_urls))

    # Write the results to a file
    with open("results.txt", "w") as f:
        f.write("---- Fuzzing Results ----\n")
        f.writelines(fuzzing_results)
        f.write("\n---- HTTP Response Results ----\n")
        f.writelines(response_results)

    print("Results written to 'results.txt'")
